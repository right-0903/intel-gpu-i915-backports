From e205d8873852b164191495dbea9973d0b18dc55e Mon Sep 17 00:00:00 2001
From: nuvole <mitltlatltl@gmail.com>
Date: Mon, 9 Oct 2023 00:14:12 +0800
Subject: [PATCH] bonus: remove dependency for compat module for linux6, only
 tested with 6.1LTS

after removing almost all dependeny symbols for the compat module, we can remove the compat module now.
---
 Makefile.kernel                  |   2 +-
 dkms.conf                        |   8 +-
 drivers/gpu/drm/i915/Makefile    |   4 +-
 drivers/gpu/drm/i915/pagecache.c |  95 +++++++++++++++++++++++
 drivers/gpu/drm/i915/ptrace.c    | 129 +++++++++++++++++++++++++++++++
 5 files changed, 230 insertions(+), 8 deletions(-)
 create mode 100644 drivers/gpu/drm/i915/pagecache.c
 create mode 100644 drivers/gpu/drm/i915/ptrace.c

diff --git a/Makefile.kernel b/Makefile.kernel
index 93c50c6..ccc15d1 100644
--- a/Makefile.kernel
+++ b/Makefile.kernel
@@ -38,7 +38,7 @@ ifeq ($(CPTCFG_KERNEL_4_3),y)
 subdir-ccflags-y += -Wno-pointer-sign
 endif
 
-obj-y += compat/
+# obj-y += compat/
 
 obj-$(CPTCFG_DRM_I915) += drivers/gpu/drm/i915/
 #obj-$(CPTCFG_CFG80211) += net/wireless/
diff --git a/dkms.conf b/dkms.conf
index e2b61e4..86a9b7f 100644
--- a/dkms.conf
+++ b/dkms.conf
@@ -2,8 +2,8 @@ PACKAGE_NAME="intel-i915-dkms-moded"
 PACKAGE_VERSION="23.7.17_230608.25"
 AUTOINSTALL="yes"
 
-BUILT_MODULE_NAME[0]="compat"
-BUILT_MODULE_LOCATION[0]="compat"
+BUILT_MODULE_NAME[0]="pmt_crashlog"
+BUILT_MODULE_LOCATION[0]="drivers/platform/x86/intel/pmt"
 DEST_MODULE_LOCATION[0]="/updates"
 
 BUILT_MODULE_NAME[1]="i915"
@@ -58,10 +58,6 @@ BUILT_MODULE_NAME[13]="pmt_telemetry"
 BUILT_MODULE_LOCATION[13]="drivers/platform/x86/intel/pmt"
 DEST_MODULE_LOCATION[13]="/updates"
 
-BUILT_MODULE_NAME[14]="pmt_crashlog"
-BUILT_MODULE_LOCATION[14]="drivers/platform/x86/intel/pmt"
-DEST_MODULE_LOCATION[14]="/updates"
-
 # Here is where we could specify use of the defconfig. Right now it uses the kernel configuration from /usr/src/
 MAKE="cp defconfigs/i915 .config; 'make' -j$(nproc) KLIB=/lib/modules/$kernelver olddefconfig; 'make' -j$(nproc) KLIB=/lib/modules/$kernelver"
 CLEAN="'make' clean"
diff --git a/drivers/gpu/drm/i915/Makefile b/drivers/gpu/drm/i915/Makefile
index 83fdccb..0e36088 100644
--- a/drivers/gpu/drm/i915/Makefile
+++ b/drivers/gpu/drm/i915/Makefile
@@ -32,7 +32,9 @@ subdir-ccflags-y += -I$(src)
 # Please keep these build lists sorted!
 
 # core driver code
-i915-y += i915_driver.o \
+i915-y += pagecache.o \
+	  ptrace.o \
+	  i915_driver.o \
 	  i915_config.o \
 	  i915_drm_client.o \
 	  i915_getparam.o \
diff --git a/drivers/gpu/drm/i915/pagecache.c b/drivers/gpu/drm/i915/pagecache.c
new file mode 100644
index 0000000..d9bb735
--- /dev/null
+++ b/drivers/gpu/drm/i915/pagecache.c
@@ -0,0 +1,95 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Copyright (C) 1994-1999  Linus Torvalds
+ */
+
+/* copy from /compat/backport-5.19.c */
+
+#include <linux/fs.h>
+#include <linux/mm_types.h>
+#include <drm/drm_dp_helper.h>
+
+#ifdef BPM_PAGECACHE_WRITE_BEGIN_AND_END_NOT_PRESENT
+
+int pagecache_write_begin(struct file *file, struct address_space *mapping,
+                                loff_t pos, unsigned len, unsigned flags,
+                                struct page **pagep, void **fsdata)
+{
+        const struct address_space_operations *aops = mapping->a_ops;
+
+        return aops->write_begin(file, mapping, pos, len,
+                                 pagep, fsdata);
+}
+EXPORT_SYMBOL(pagecache_write_begin);
+
+int pagecache_write_end(struct file *file, struct address_space *mapping,
+                                loff_t pos, unsigned len, unsigned copied,
+                                struct page *page, void *fsdata)
+{
+        const struct address_space_operations *aops = mapping->a_ops;
+
+        return aops->write_end(file, mapping, pos, len, copied, page, fsdata);
+}
+EXPORT_SYMBOL(pagecache_write_end);
+
+#endif
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6,0,0)
+#ifdef BPM_DP_READ_LTTPR_CAPS_DPCD_ARG_NOT_PRESENT
+
+/**
+ * drm_dp_read_lttpr_common_caps - read the LTTPR common capabilities
+ * @aux: DisplayPort AUX channel
+ * @caps: buffer to return the capability info in
+ *
+ * Read capabilities common to all LTTPRs.
+ *
+ * Returns 0 on success or a negative error code on failure.
+ */
+int drm_dp_read_lttpr_common_caps(struct drm_dp_aux *aux,
+                                  u8 caps[DP_LTTPR_COMMON_CAP_SIZE])
+{
+        int ret;
+
+        ret = drm_dp_dpcd_read(aux,
+                               DP_LT_TUNABLE_PHY_REPEATER_FIELD_DATA_STRUCTURE_REV,
+                               caps, DP_LTTPR_COMMON_CAP_SIZE);
+        if (ret < 0)
+                return ret;
+
+        WARN_ON(ret != DP_LTTPR_COMMON_CAP_SIZE);
+
+        return 0;
+}
+EXPORT_SYMBOL(drm_dp_read_lttpr_common_caps);
+
+/**
+ * drm_dp_read_lttpr_phy_caps - read the capabilities for a given LTTPR PHY
+ * @aux: DisplayPort AUX channel
+ * @dp_phy: LTTPR PHY to read the capabilities for
+ * @caps: buffer to return the capability info in
+ *
+ * Read the capabilities for the given LTTPR PHY.
+ *
+ * Returns 0 on success or a negative error code on failure.
+ */
+int drm_dp_read_lttpr_phy_caps(struct drm_dp_aux *aux,
+                               enum drm_dp_phy dp_phy,
+                               u8 caps[DP_LTTPR_PHY_CAP_SIZE])
+{
+        int ret;
+
+        ret = drm_dp_dpcd_read(aux,
+                               DP_TRAINING_AUX_RD_INTERVAL_PHY_REPEATER(dp_phy),
+                               caps, DP_LTTPR_PHY_CAP_SIZE);
+        if (ret < 0)
+                return ret;
+
+        WARN_ON(ret != DP_LTTPR_PHY_CAP_SIZE);
+
+        return 0;
+}
+EXPORT_SYMBOL(drm_dp_read_lttpr_phy_caps);
+
+#endif
+#endif
diff --git a/drivers/gpu/drm/i915/ptrace.c b/drivers/gpu/drm/i915/ptrace.c
new file mode 100644
index 0000000..9e9315c
--- /dev/null
+++ b/drivers/gpu/drm/i915/ptrace.c
@@ -0,0 +1,129 @@
+/*
+ *
+ * Copyright Â© 2021 Intel Corporation
+ * All Rights Reserved.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sub license, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the
+ * next paragraph) shall be included in all copies or substantial portions
+ * of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+ * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
+ * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
+ * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+ * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+ * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ *
+ */
+
+/* copy from /compat/ptrace.c */
+
+#ifdef BPM_PTRACE_MAY_ACCESS_NOT_PRESENT
+
+#include <linux/ptrace.h>
+
+static bool ptrace_has_cap(struct user_namespace *ns, unsigned int mode)
+{
+	if (mode & PTRACE_MODE_NOAUDIT)
+		return ns_capable_noaudit(ns, CAP_SYS_PTRACE);
+	return ns_capable(ns, CAP_SYS_PTRACE);
+}
+
+/* Returns 0 on success, -errno on denial. */
+static int __ptrace_may_access(struct task_struct *task, unsigned int mode)
+{
+	const struct cred *cred = current_cred(), *tcred;
+	struct mm_struct *mm;
+	kuid_t caller_uid;
+	kgid_t caller_gid;
+
+	if (!(mode & PTRACE_MODE_FSCREDS) == !(mode & PTRACE_MODE_REALCREDS)) {
+		WARN(1, "denying ptrace access check without PTRACE_MODE_*CREDS\n");
+		return -EPERM;
+	}
+
+	/* May we inspect the given task?
+	 * This check is used both for attaching with ptrace
+	 * and for allowing access to sensitive information in /proc.
+	 *
+	 * ptrace_attach denies several cases that /proc allows
+	 * because setting up the necessary parent/child relationship
+	 * or halting the specified task is impossible.
+	 */
+
+	/* Don't let security modules deny introspection */
+	if (same_thread_group(task, current))
+		return 0;
+	rcu_read_lock();
+	if (mode & PTRACE_MODE_FSCREDS) {
+		caller_uid = cred->fsuid;
+		caller_gid = cred->fsgid;
+	} else {
+		/*
+		 * Using the euid would make more sense here, but something
+		 * in userland might rely on the old behavior, and this
+		 * shouldn't be a security problem since
+		 * PTRACE_MODE_REALCREDS implies that the caller explicitly
+		 * used a syscall that requests access to another process
+		 * (and not a filesystem syscall to procfs).
+		 */
+		caller_uid = cred->uid;
+		caller_gid = cred->gid;
+	}
+	tcred = __task_cred(task);
+	if (uid_eq(caller_uid, tcred->euid) &&
+	    uid_eq(caller_uid, tcred->suid) &&
+	    uid_eq(caller_uid, tcred->uid)  &&
+	    gid_eq(caller_gid, tcred->egid) &&
+	    gid_eq(caller_gid, tcred->sgid) &&
+	    gid_eq(caller_gid, tcred->gid))
+		goto ok;
+	if (ptrace_has_cap(tcred->user_ns, mode))
+		goto ok;
+	rcu_read_unlock();
+	return -EPERM;
+ok:
+	rcu_read_unlock();
+	/*
+	 * If a task drops privileges and becomes nondumpable (through a syscall
+	 * like setresuid()) while we are trying to access it, we must ensure
+	 * that the dumpability is read after the credentials; otherwise,
+	 * we may be able to attach to a task that we shouldn't be able to
+	 * attach to (as if the task had dropped privileges without becoming
+	 * nondumpable).
+	 * Pairs with a write barrier in commit_creds().
+	 */
+	smp_rmb();
+	mm = task->mm;
+	if (mm &&
+	    ((get_dumpable(mm) != SUID_DUMP_USER) &&
+	     !ptrace_has_cap(mm->user_ns, mode)))
+	    return -EPERM;
+	/*
+	 * Backported ptrace_may_access without calling security_ptrace_access_check().
+	 * Replaced security_ptrace_access_check function call with return 0 value.
+	 */
+	return 0;
+}
+
+bool ptrace_may_access(struct task_struct *task, unsigned int mode)
+{
+	int err;
+
+	task_lock(task);
+	err = __ptrace_may_access(task, mode);
+	task_unlock(task);
+	return !err;
+}
+EXPORT_SYMBOL_GPL(ptrace_may_access);
+
+#endif /* BPM_PTRACE_MAY_ACCESS_NOT_PRESENT */
-- 
2.42.0

